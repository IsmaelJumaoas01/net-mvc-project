@model homeowner.Models.ForumPostModel
@{
    ViewData["Title"] = "Forum Post Details";
    var currentUserId = ViewBag.CurrentUserId;
}

<div class="forum-details">
    <div class="post-container" data-post-id="@Model.PostID">
        <div class="post-header">
            <h1>@Model.Title</h1>
            <div class="post-meta">
                <span class="author"><i class="fas fa-user"></i> @Model.Username</span>
                <span class="date"><i class="fas fa-calendar"></i> @Model.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</span>
            </div>
        </div>

        <div class="post-content">
            <p>@Model.Content</p>
            @if (Model.Image != null && Model.Image.Length > 0)
            {
                <img src="data:image/png;base64,@Convert.ToBase64String(Model.Image)" class="post-image" alt="Post Image">
            }
        </div>

        <div class="post-actions">
            <div class="vote-section">
                <button class="vote-btn upvote-btn @(Model.HasUpvoted ? "active" : "")" data-post-id="@Model.PostID" data-vote="1">
                    <i class="fas fa-arrow-up"></i>
                    <span class="upvote-count">@Model.Upvotes</span>
                </button>
                <button class="vote-btn downvote-btn @(Model.HasDownvoted ? "active" : "")" data-post-id="@Model.PostID" data-vote="-1">
                    <i class="fas fa-arrow-down"></i>
                    <span class="downvote-count">@Model.Downvotes</span>
                </button>
            </div>
            
            @if (currentUserId != null && Model.UserID.ToString() == currentUserId)
            {
                <div class="post-edit-actions">
                    <button class="btn btn-primary edit-post-btn" data-post-id="@Model.PostID">
                        <i class="fas fa-edit"></i> Edit Post
                    </button>
                    <button class="btn btn-danger delete-post-btn" data-post-id="@Model.PostID">
                        <i class="fas fa-trash"></i> Delete Post
                    </button>
                </div>
            }
        </div>
    </div>

    <div class="comments-section">
        <h2>Comments</h2>
        <form id="commentForm" class="comment-form">
            <div class="form-group">
                <textarea class="form-control" name="Content" rows="3" placeholder="Write your comment..." required></textarea>
            </div>
            <div class="form-group">
                <label class="custom-file-upload">
                    <input type="file" name="imageFile" accept="image/*">
                    <i class="fas fa-image"></i> Add Image
                </label>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Post Comment
                </button>
            </div>
        </form>

        <div id="commentsContainer">
        @foreach (var comment in ViewBag.Comments)
        {
                <div class="comment-card" data-comment-id="@comment.CommentID">
                    <div class="comment-content">
                        <div class="comment-header">
                            <span class="comment-author">@comment.Username</span>
                            <span class="comment-date">@comment.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</span>
                        </div>
                        <p>@comment.Content</p>
                    @if (comment.Image != null && comment.Image.Length > 0)
                    {
                            <img src="data:image/png;base64,@Convert.ToBase64String(comment.Image)" class="comment-image" alt="Comment Image">
                        }
                    </div>

                    <div class="comment-actions">
                        <div class="vote-section">
                            <button class="vote-btn upvote-btn @(comment.HasUpvoted ? "active" : "")" 
                                    data-comment-id="@comment.CommentID" data-vote="1">
                                <i class="fas fa-arrow-up"></i>
                                <span class="upvote-count">@comment.Upvotes</span>
                        </button>
                            <button class="vote-btn downvote-btn @(comment.HasDownvoted ? "active" : "")" 
                                    data-comment-id="@comment.CommentID" data-vote="-1">
                                <i class="fas fa-arrow-down"></i>
                                <span class="downvote-count">@comment.Downvotes</span>
                        </button>
                        </div>

                        @if (currentUserId != null && comment.UserID.ToString() == currentUserId)
                        {
                            <div class="comment-edit-actions">
                                <button class="btn btn-sm btn-primary edit-comment-btn" data-comment-id="@comment.CommentID">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-comment-btn" data-comment-id="@comment.CommentID">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Edit Post Modal -->
<div class="modal fade" id="editPostModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Post</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editPostForm">
                    <input type="hidden" name="PostID" value="@Model.PostID">
                    <div class="form-group">
                        <label>Title</label>
                        <input type="text" class="form-control" name="Title" value="@Model.Title" required>
                    </div>
                    <div class="form-group">
                        <label>Content</label>
                        <textarea class="form-control" name="Content" rows="4" required>@Model.Content</textarea>
                    </div>
                    <div class="form-group">
                        <label class="custom-file-upload">
                            <input type="file" name="imageFile" accept="image/*">
                            <i class="fas fa-image"></i> Change Image
                        </label>
                        @if (Model.Image != null && Model.Image.Length > 0)
                        {
                            <button type="button" class="btn btn-danger" id="removeImage">
                                <i class="fas fa-trash"></i> Remove Image
                            </button>
                        }
                    </div>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Comment Modal -->
<div class="modal fade" id="editCommentModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Comment</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editCommentForm">
                    <input type="hidden" name="CommentID">
                    <div class="form-group">
                        <label>Content</label>
                        <textarea class="form-control" name="Content" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #0d1117; /* GitHub dark theme background */
        color: #ffffff;
        font-family: 'Poppins', sans-serif;
    }

    .forum-details {
        padding: 2rem;
        background-color: #161b22; /* GitHub dark theme container */
        border-radius: 20px;
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
    }

    .post-container {
        background: #21262d; /* GitHub dark theme section */
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        border: 1px solid #30363d;
    }

    .post-header h1 {
        color: #fff;
        font-size: 2rem;
        margin: 0;
        margin-bottom: 1rem;
    }

    .post-meta {
        display: flex;
        gap: 1rem;
        color: #8b949e;
        margin-bottom: 1.5rem;
    }

    .post-meta span {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .post-meta i {
        color: #58a6ff;
    }

    .post-content {
        color: #c9d1d9;
        line-height: 1.6;
        margin-bottom: 1.5rem;
    }

    .post-image {
        max-width: 100%;
        border-radius: 10px;
        margin-top: 1rem;
        border: 1px solid #30363d;
    }

    .post-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #30363d;
    }

    .vote-section {
        display: flex;
        gap: 1rem;
    }

    .vote-btn {
        background: #21262d;
        border: 1px solid #30363d;
        color: #c9d1d9;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .vote-btn:hover {
        transform: translateY(-2px);
    }

    .vote-btn.active {
        background: #238636;
        color: #fff;
    }

    .upvote-btn:hover {
        background: #238636;
        border-color: #238636;
        color: #fff;
    }

    .downvote-btn:hover {
        background: #f85149;
        border-color: #f85149;
        color: #fff;
    }

    .comments-section {
        background: #21262d;
        border-radius: 12px;
        padding: 2rem;
        border: 1px solid #30363d;
    }

    .comments-section h2 {
        color: #fff;
        margin-bottom: 1.5rem;
    }

    .comment-form {
        background: #2d333b;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        border: 1px solid #30363d;
    }

    .form-control {
        background: #2d333b;
        border: 1px solid #30363d;
        color: #c9d1d9 !important;
        border-radius: 6px;
    }

    .form-control:focus {
        background: #2d333b;
        border-color: #58a6ff;
        box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.2);
        color: #c9d1d9 !important;
    }

    .form-control::placeholder {
        color: #8b949e;
    }

    textarea.form-control {
        min-height: 100px;
        resize: vertical;
    }

    .comment-card {
        background: #2d333b;
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid #30363d;
        transition: transform 0.3s ease;
    }

    .comment-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
    }

    .comment-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .comment-author {
        color: #58a6ff;
        font-weight: 500;
    }

    .comment-date {
        color: #8b949e;
        font-size: 0.9rem;
    }

    .comment-content {
        color: #c9d1d9;
    }

    .comment-image {
        max-width: 100%;
        border-radius: 8px;
        margin-top: 1rem;
        border: 1px solid #30363d;
    }

    .comment-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid #30363d;
    }

    .modal-content {
        background: #21262d;
        border: 1px solid #30363d;
        color: #c9d1d9;
    }

    .modal-header {
        background: #2d333b;
        border-bottom: 1px solid #30363d;
        padding: 1.5rem;
    }

    .modal-title {
        color: #fff;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .modal-body {
        background: #21262d;
        padding: 1.5rem;
    }

    .modal-footer {
        background: #2d333b;
        border-top: 1px solid #30363d;
        padding: 1rem;
    }

    .btn-primary {
        background: #238636;
        border: 1px solid rgba(240,246,252,0.1);
        color: #fff;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        transition: all 0.2s ease;
    }

    .btn-primary:hover {
        background: #2ea043;
        transform: translateY(-1px);
    }

    .btn-danger {
        background: #f85149;
        border: 1px solid rgba(240,246,252,0.1);
        color: #fff;
    }

    .btn-danger:hover {
        background: #f85149;
        opacity: 0.9;
        transform: translateY(-1px);
    }

    .custom-file-upload {
        display: inline-block;
        padding: 0.75rem 1.5rem;
        background: #2d333b;
        border: 1px solid #30363d;
        border-radius: 6px;
        color: #c9d1d9;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .custom-file-upload:hover {
        background: #444;
        border-color: #58a6ff;
    }

    .custom-file-upload input[type="file"] {
        display: none;
    }

    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 2rem;
        border-radius: 10px;
        color: white;
        font-weight: 500;
        transform: translateX(120%);
        transition: transform 0.3s ease;
        z-index: 9999;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .toast.show {
        transform: translateX(0);
    }

    .toast.success {
        background: linear-gradient(45deg, #238636, #2ea043);
    }

    .toast.error {
        background: linear-gradient(45deg, #f85149, #f85149);
    }
</style>

<script>
    $(document).ready(function() {
        // Post voting
        $('.vote-btn[data-post-id]').click(function() {
            const postId = $(this).data('post-id');
            const voteValue = $(this).data('vote');
            const btn = $(this);
            const voteSection = btn.closest('.vote-section');
            const oppositeBtn = voteValue === 1 ? 
                voteSection.find('.downvote-btn') : 
                voteSection.find('.upvote-btn');

            $.ajax({
                url: '@Url.Action("VotePost", "Forum")',
                type: 'POST',
                data: { postID: postId, voteValue: voteValue },
                success: function(response) {
                    if (response.success) {
                        // Update vote counts
                        voteSection.find('.upvote-count').text(response.upvotes);
                        voteSection.find('.downvote-count').text(response.downvotes);

                        // Toggle active states
                        if (response.newVoteValue === voteValue) {
                            btn.addClass('active');
                            oppositeBtn.removeClass('active');
                        } else {
                            btn.removeClass('active');
                        }

                        showToast('Vote recorded successfully!', 'success');
                } else {
                        showToast(response.message, 'error');
                    }
                }
            });
        });

        // Comment voting
        $('.vote-btn[data-comment-id]').click(function() {
            const commentId = $(this).data('comment-id');
            const voteValue = $(this).data('vote');
            const btn = $(this);
            const voteSection = btn.closest('.vote-section');
            const oppositeBtn = voteValue === 1 ? 
                voteSection.find('.downvote-btn') : 
                voteSection.find('.upvote-btn');

            $.ajax({
                url: '@Url.Action("VoteComment", "Forum")',
                type: 'POST',
                data: { commentID: commentId, voteValue: voteValue },
                success: function(response) {
                    if (response.success) {
                        // Update vote counts
                        voteSection.find('.upvote-count').text(response.upvotes);
                        voteSection.find('.downvote-count').text(response.downvotes);

                        // Toggle active states
                        if (response.newVoteValue === voteValue) {
                            btn.addClass('active');
                            oppositeBtn.removeClass('active');
                        } else {
                            btn.removeClass('active');
                        }

                        showToast('Vote recorded successfully!', 'success');
                } else {
                        showToast(response.message, 'error');
                    }
                }
            });
        });

// Add comment
$('#commentForm').submit(function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    formData.append('PostID', '@Model.PostID');

    $.ajax({
        url: '@Url.Action("AddComment", "Forum")',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                // Clear form
                $('#commentForm')[0].reset();
                $('#commentImagePreview').hide();
                // Add new comment to the list
                const newComment = createCommentElement(response.comment);
                $('#commentsContainer').prepend(newComment);
                showToast('Comment added successfully!', 'success');
                    } else {
                showToast(response.message, 'error');
            }
        }
    });
});
        // Image preview for comment
        $('input[name="imageFile"]').change(function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#commentImagePreview').attr('src', e.target.result).show();
                }
                reader.readAsDataURL(file);
            }
        });

        // Edit post
        $('.edit-post-btn').click(function() {
            const postId = $(this).data('post-id');
            const title = $(this).closest('.post-container').find('h1').text();
            const content = $(this).closest('.post-container').find('.post-content p').text();
            
            $('#editPostForm input[name="PostID"]').val(postId);
            $('#editPostForm input[name="Title"]').val(title);
            $('#editPostForm textarea[name="Content"]').val(content);
            $('#editPostModal').modal('show');
        });

       // Edit post
$('#editPostForm').submit(function(e) {
    e.preventDefault();
    const formData = new FormData(this);
    const postContainer = $('.post-container');

    $.ajax({
        url: '@Url.Action("EditPost", "Forum")',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
            if (response.success) {
                // Update post content without reload
                postContainer.find('h1').text(formData.get('Title'));
                postContainer.find('.post-content p').text(formData.get('Content'));
                if (response.imageUrl) {
                    postContainer.find('.post-image').attr('src', response.imageUrl).show();
                } else if (formData.get('imageFile').size === 0) {
                    postContainer.find('.post-image').show();
                } else {
                    postContainer.find('.post-image').hide();
                }
                $('#editPostModal').modal('hide');
                showToast('Post updated successfully!', 'success');
            } else {
                showToast(response.message, 'error');
            }
        },
        error: function(xhr) {
            if (xhr.responseText.includes("Packets larger than max_allowed_packet")) {
                showToast("The image is too large to upload. Please choose a smaller image.", 'error');
            } else {
                showToast("An error occurred while updating the post.", 'error');
            }
        }
    });
});

        // Remove post image
        $('#removeImage').click(function() {
            const postId = $('#editPostForm input[name="PostID"]').val();

            $.ajax({
                url: '@Url.Action("DeletePostImage", "Forum")',
                type: 'POST',
                data: { postId: postId },
                success: function(response) {
                    if (response.success) {
                        $('.post-image').hide();
                        $('#removeImage').hide();
                        showToast('Image removed successfully!', 'success');
                } else {
                        showToast(response.message, 'error');
                    }
                }
            });
        });

        // Delete post
        $('.delete-post-btn').click(function() {
            if (confirm('Are you sure you want to delete this post?')) {
                const postId = $(this).data('post-id');
                $.ajax({
                    url: '@Url.Action("DeletePost", "Forum")',
                    type: 'POST',
                    data: { id: postId },
                    success: function(response) {
                        if (response.success) {
                            window.location.href = '@Url.Action("Index", "Forum")';
                        } else {
                            showToast(response.message, 'error');
                        }
                    }
                });
            }
        });

        // Edit comment
        $('.edit-comment-btn').click(function() {
            const commentId = $(this).data('comment-id');
            const content = $(this).closest('.comment-card').find('p').text();
            $('#editCommentForm input[name="CommentID"]').val(commentId);
            $('#editCommentForm textarea[name="Content"]').val(content);
            $('#editCommentModal').modal('show');
        });

        $('#editCommentForm').submit(function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            const commentId = formData.get('CommentID');
            const content = formData.get('Content');
            const commentCard = $(`.comment-card[data-comment-id="${commentId}"]`);

            $.ajax({
                url: '@Url.Action("EditComment", "Forum")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        // Update comment content without reload
                        commentCard.find('p').text(content);
                        if (response.imageUrl) {
                            commentCard.find('.comment-image').attr('src', response.imageUrl).show();
                        } else {
                            commentCard.find('.comment-image').hide();
                        }
                        $('#editCommentModal').modal('hide');
                        showToast('Comment updated successfully!', 'success');
                    } else {
                        showToast(response.message, 'error');
                    }
                }
            });
        });

        // Remove comment image
        $('#removeCommentImage').click(function() {
            const commentId = $('#editCommentForm input[name="CommentID"]').val();

            $.ajax({
                url: '@Url.Action("DeleteCommentImage", "Forum")',
                type: 'POST',
                data: { commentId: commentId },
                success: function(response) {
                    if (response.success) {
                        $('.comment-image').hide();
                        $('#removeCommentImage').hide();
                        showToast('Image removed successfully!', 'success');
                    } else {
                        showToast(response.message, 'error');
                    }
                }
            });
        });

        // Delete comment
        $('.delete-comment-btn').click(function() {
            if (confirm('Are you sure you want to delete this comment?')) {
                const commentId = $(this).data('comment-id');
                const commentCard = $(`.comment-card[data-comment-id="${commentId}"]`);

                $.ajax({
                    url: '@Url.Action("DeleteComment", "Forum")',
                    type: 'POST',
                    data: { id: commentId },
                    success: function(response) {
                        if (response.success) {
                            // Remove comment without reload
                            commentCard.fadeOut(300, function() { $(this).remove(); });
                            showToast('Comment deleted successfully!', 'success');
                        } else {
                            showToast(response.message, 'error');
                        }
                    }
                });
            }
        });

       // Helper function to create comment element
function createCommentElement(comment) {
    const currentUserId = '@currentUserId';
    const isOwner = currentUserId === comment.UserID.toString();
    
    return `
        <div class="comment-card" data-comment-id="${comment.CommentID}">
            <div class="comment-content">
                <div class="comment-header">
                    <span class="comment-author">${comment.Username}</span>
                    <span class="comment-date">${new Date(comment.CreatedAt).toLocaleString()}</span>
                </div>
                <p>${comment.Content}</p>
                ${comment.Image ? `<img src="data:image/png;base64,${comment.Image}" class="comment-image" alt="Comment Image">` : ''}
            </div>
            <div class="comment-actions">
                <div class="vote-section">
                    <button class="vote-btn upvote-btn" data-comment-id="${comment.CommentID}" data-vote="1">
                        <i class="fas fa-arrow-up"></i>
                        <span class="upvote-count">0</span>
                    </button>
                    <button class="vote-btn downvote-btn" data-comment-id="${comment.CommentID}" data-vote="-1">
                        <i class="fas fa-arrow-down"></i>
                        <span class="downvote-count">0</span>
                    </button>
                </div>
                ${isOwner ? `
                    <div class="comment-edit-actions">
                        <button class="btn btn-sm btn-primary edit-comment-btn" data-comment-id="${comment.CommentID}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger delete-comment-btn" data-comment-id="${comment.CommentID}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                ` : ''}
            </div>
        </div>
    `;
}
        // Toast notification
        function showToast(message, type) {
            const toast = $('<div>').addClass('toast ' + type).text(message);
            $('body').append(toast);
            setTimeout(() => toast.addClass('show'), 100);
            setTimeout(() => {
                toast.removeClass('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    });
</script>