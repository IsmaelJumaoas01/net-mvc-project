@model List<homeowner.Models.FeedbackModel>
@{
    ViewData["Title"] = "Feedback & Complaints";
    bool isAdmin = ViewBag.IsAdmin;
    bool isStaff = ViewBag.IsStaff;
}

<div class="feedback-management">
    <div class="dashboard-header">
        <h1>Feedback & Complaints</h1>
        <div class="header-actions">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Search feedback...">
            </div>
            <div class="filter-dropdown">
                <select id="statusFilter" class="form-control">
                    <option value="all">All Status</option>
                    <option value="pending">Pending</option>
                    <option value="in-progress">In Progress</option>
                    <option value="resolved">Resolved</option>
                    <option value="rejected">Rejected</option>
                </select>
            </div>
            @if (!isAdmin && !isStaff)
            {
                <button class="btn btn-primary" data-toggle="modal" data-target="#createFeedbackModal">
                    <i class="fas fa-plus"></i> Submit Feedback
                </button>
            }
        </div>
    </div>

    <div class="feedback-grid">
        @if (Model != null && Model.Any())
        {
            foreach (var feedback in Model)
            {
                <div class="feedback-card" data-status="@feedback.Status.ToLower()">
                    <div class="feedback-header">
                        <h3>@feedback.Title</h3>
                        <span class="status-badge @feedback.Status.ToLower()">@feedback.Status</span>
                    </div>
                    <div class="feedback-body">
                        <p class="feedback-content">@feedback.Content</p>
                        <div class="feedback-meta">
                            <span><i class="fas fa-user"></i> @feedback.Username</span>
                            <span><i class="fas fa-calendar"></i> @feedback.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                    @if (isAdmin || isStaff)
                    {
                        <div class="feedback-actions">
                            <button class="btn btn-outline-primary update-status" data-feedback-id="@feedback.FeedbackID">
                                <i class="fas fa-edit"></i> Update Status
                            </button>
                            <button class="btn btn-outline-danger delete-feedback" data-feedback-id="@feedback.FeedbackID">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-comments"></i>
                <p>No feedback available</p>
            </div>
        }
    </div>
</div>

<!-- Create Feedback Modal -->
<div class="modal fade" id="createFeedbackModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Submit Feedback</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="feedbackForm">
                    <div class="form-group">
                        <label>Title</label>
                        <input type="text" class="form-control" id="feedbackTitle" required>
                    </div>
                    <div class="form-group">
                        <label>Content</label>
                        <textarea class="form-control" id="feedbackContent" rows="5" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i> Submit Feedback
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Update Status Modal -->
@if (isAdmin || isStaff)
{
    <div class="modal fade" id="updateStatusModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update Status</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="updateStatusForm">
                        <input type="hidden" name="feedbackId">
                        <div class="form-group">
                            <label>Status</label>
                            <select class="form-control status-select" name="status" required>
                                <option value="Pending">Pending</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Resolved">Resolved</option>
                                <option value="Rejected">Rejected</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-check"></i> Update Status
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@section Styles {
    <style>
        /* Dashboard Layout */
        .feedback-management {
            padding: 2rem;
            background: #1a1a1a;
            min-height: 100vh;
        }

        .dashboard-header {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .dashboard-header h1 {
            color: #fff;
            font-size: 2rem;
            margin: 0;
            background: linear-gradient(45deg, #00bcd4, #2196f3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
        }

        /* Search Box */
        .search-box {
            position: relative;
            flex: 1;
            min-width: 200px;
        }

        .search-box i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            background: #222;
            border: 1px solid #333;
            border-radius: 8px;
            color: #fff;
            transition: all 0.3s ease;
        }

        .search-box input:focus {
            background: #2a2a2a;
            border-color: #00bcd4;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.25);
        }

        /* Filter Dropdown */
        .filter-dropdown select {
            padding: 0.75rem 1rem;
            background: #222;
            border: 1px solid #333;
            border-radius: 8px;
            color: #fff;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .filter-dropdown select:focus {
            background: #2a2a2a;
            border-color: #00bcd4;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.25);
        }

        /* Feedback Grid */
        .feedback-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 1.5rem;
        }

        .feedback-card {
            background: #222;
            border-radius: 15px;
            padding: 1.5rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .feedback-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .feedback-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .feedback-header h3 {
            color: #fff;
            font-size: 1.25rem;
            margin: 0;
            flex: 1;
            margin-right: 1rem;
        }

        /* Status Badges */
        .status-badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .status-badge.pending {
            background: rgba(255, 152, 0, 0.1);
            color: #ff9800;
        }

        .status-badge.in-progress {
            background: rgba(33, 150, 243, 0.1);
            color: #2196f3;
        }

        .status-badge.resolved {
            background: rgba(76, 175, 80, 0.1);
            color: #4caf50;
        }

        .status-badge.rejected {
            background: rgba(244, 67, 54, 0.1);
            color: #f44336;
        }

        /* Feedback Content */
        .feedback-content {
            color: #bbb;
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .feedback-meta {
            display: flex;
            gap: 1rem;
            color: #888;
            font-size: 0.9rem;
        }

        .feedback-meta span {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .feedback-meta i {
            color: #00bcd4;
        }

        /* Feedback Actions */
        .feedback-actions {
            margin-top: 1.5rem;
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        /* Modal Styles */
        .modal-content {
            background: #2a2a2a;
            color: #fff;
        }

        .modal-header {
            border-bottom: 1px solid #333;
        }

        .modal-header .close {
            color: #fff;
        }

        .form-control {
            background: #333;
            border: 1px solid #444;
            color: #fff;
            border-radius: 8px;
        }

        .form-control:focus {
            background: #333;
            border-color: #00bcd4;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.25);
            color: #fff;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem;
            background: #222;
            border-radius: 15px;
            color: #666;
            grid-column: 1 / -1;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
        }

        .empty-state p {
            font-size: 1.2rem;
            margin: 0;
        }

        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 2rem;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 9999;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
        }

        .toast.error {
            background: linear-gradient(45deg, #f44336, #e91e63);
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search functionality
            $('#searchInput').on('input', function() {
                const searchTerm = $(this).val().toLowerCase();
                $('.feedback-card').each(function() {
                    const title = $(this).find('h3').text().toLowerCase();
                    const content = $(this).find('.feedback-content').text().toLowerCase();
                    const visible = title.includes(searchTerm) || content.includes(searchTerm);
                    $(this).toggle(visible);
                });
            });

            // Status filter
            $('#statusFilter').change(function() {
                const status = $(this).val();
                $('.feedback-card').each(function() {
                    if (status === 'all') {
                        $(this).show();
                    } else {
                        const cardStatus = $(this).data('status');
                        $(this).toggle(cardStatus === status);
                    }
                });
            });

            // Submit feedback form
            $('#feedbackForm').submit(function(e) {
                e.preventDefault();
                
                const formData = {
                    Title: $('#feedbackTitle').val(),
                    Content: $('#feedbackContent').val()
                };

                $.ajax({
                    url: '@Url.Action("Create", "Feedback")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        if (response.success) {
                            showToast('Feedback submitted successfully!', 'success');
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showToast(response.message || 'Error submitting feedback', 'error');
                        }
                    },
                    error: function(xhr) {
                        showToast(xhr.responseText || 'Error submitting feedback', 'error');
                    }
                });
            });

            // Status update
            $('.update-status').click(function() {
                const feedbackId = $(this).data('feedback-id');
                const card = $(this).closest('.feedback-card');
                const currentStatus = card.find('.status-badge').text();
                
                $('#updateStatusForm input[name="feedbackId"]').val(feedbackId);
                $('#updateStatusForm select[name="status"]').val(currentStatus);
                $('#updateStatusModal').modal('show');
            });

            $('#updateStatusForm').submit(function(e) {
                e.preventDefault();
                const feedbackId = $(this).find('input[name="feedbackId"]').val();
                const status = $(this).find('select[name="status"]').val();
                const card = $(`.feedback-card[data-feedback-id="${feedbackId}"]`);

                $.ajax({
                    url: '@Url.Action("UpdateStatus", "Feedback")',
                    type: 'POST',
                    data: { id: feedbackId, status: status },
                    success: function(response) {
                        if (response.success) {
                            card.find('.status-badge')
                                .removeClass('pending in-progress resolved rejected')
                                .addClass(status.toLowerCase())
                                .text(status);
                            $('#updateStatusModal').modal('hide');
                            showToast('Status updated successfully!', 'success');
                        } else {
                            showToast(response.message || 'Error updating status', 'error');
                        }
                    }
                });
            });

            // Delete feedback
            $('.delete-feedback').click(function() {
                if (confirm('Are you sure you want to delete this feedback?')) {
                    const feedbackId = $(this).data('feedback-id');
                    const card = $(this).closest('.feedback-card');

                    $.ajax({
                        url: '@Url.Action("Delete", "Feedback")',
                        type: 'POST',
                        data: { id: feedbackId },
                        success: function(response) {
                            if (response.success) {
                                card.fadeOut(300, function() { $(this).remove(); });
                                showToast('Feedback deleted successfully!', 'success');
                            } else {
                                showToast(response.message || 'Error deleting feedback', 'error');
                            }
                        }
                    });
                }
            });

            function showToast(message, type) {
                const toast = $('<div>').addClass('toast ' + type).text(message);
                $('body').append(toast);
                setTimeout(() => toast.addClass('show'), 100);
                setTimeout(() => {
                    toast.removeClass('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
        });
    </script>
} 