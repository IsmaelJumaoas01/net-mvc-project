@model homeowner.ViewModels.ManageUsersViewModel

@{
    ViewBag.Title = "Manage Users";
}

<div class="user-management">
    <div class="dashboard-header">
        <h1>User Management</h1>
        <div class="header-actions">
            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="searchInput" placeholder="Search users...">
            </div>
            <button class="btn btn-primary" data-toggle="modal" data-target="#addUserModal">
                <i class="fas fa-user-plus"></i> Add New User
            </button>
        </div>
    </div>

    <!-- Homeowners Section -->
    <div class="users-section homeowners-section">
        <div class="section-header">
            <h2><i class="fas fa-home"></i> Homeowners</h2>
            <div class="section-actions">
                <button class="btn btn-outline" id="exportHomeowners">
                    <i class="fas fa-download"></i> Export List
                </button>
            </div>
        </div>

        <div class="user-grid">
            @foreach (var user in Model.Users.Where(u => u.Role == "Homeowner"))
            {
                <div class="user-card" data-role="@user.Role">
                    <div class="user-header">
                        <div class="user-avatar">
                            <i class="fas fa-home"></i>
                        </div>
                        <div class="user-info">
                            <h3>@user.Username</h3>
                            <span class="role-badge @user.Role.ToLower()">@user.Role</span>
                        </div>
                        <div class="user-actions">
                            <button class="btn btn-icon edit-user" data-user-id="@user.UserID">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-icon delete-user" data-user-id="@user.UserID">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="user-details">
                        <div class="detail-item">
                            <i class="fas fa-envelope"></i>
                            <span>@user.Email</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-phone"></i>
                            <span>@(string.IsNullOrEmpty(user.PhoneNumber) ? "Not provided" : user.PhoneNumber)</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-user-circle"></i>
                            <span>@($"{user.FirstName} {user.LastName}")</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-map-marker-alt"></i>
                            <span>@(string.IsNullOrEmpty(user.Address) ? "No address provided" : user.Address)</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-calendar"></i>
                            <span>Joined @user.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Staff & Admin Section -->
    <div class="users-section staff-section">
        <div class="section-header">
            <h2><i class="fas fa-user-tie"></i> Staff & Administrators</h2>
            <div class="section-actions">
                <button class="btn btn-outline" id="exportStaff">
                    <i class="fas fa-download"></i> Export List
                </button>
            </div>
        </div>

        <div class="user-grid">
            @foreach (var user in Model.Users.Where(u => u.Role == "Staff" || u.Role == "Administrator"))
            {
                <div class="user-card" data-role="@user.Role">
                    <div class="user-header">
                        <div class="user-avatar">
                            <i class="fas fa-user-tie"></i>
                        </div>
                        <div class="user-info">
                            <h3>@user.Username</h3>
                            <span class="role-badge @user.Role.ToLower()">@user.Role</span>
                        </div>
                        <div class="user-actions">
                            <button class="btn btn-icon edit-user" data-user-id="@user.UserID">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-icon delete-user" data-user-id="@user.UserID">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div class="user-details">
                        <div class="detail-item">
                            <i class="fas fa-envelope"></i>
                            <span>@user.Email</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-phone"></i>
                            <span>@(string.IsNullOrEmpty(user.PhoneNumber) ? "Not provided" : user.PhoneNumber)</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-user-circle"></i>
                            <span>@($"{user.FirstName} {user.LastName}")</span>
                        </div>
                        <div class="detail-item">
                            <i class="fas fa-calendar"></i>
                            <span>Joined @user.CreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add User Modal -->
<div class="modal fade" id="addUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New User</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addUserForm">
                    <div class="form-group">
                        <label>Username</label>
                        <input type="text" class="form-control" name="Username" required>
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" class="form-control" name="Email" required>
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <div class="password-input">
                            <input type="password" class="form-control" name="Password" required>
                            <button type="button" class="toggle-password">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>First Name</label>
                            <input type="text" class="form-control" name="FirstName">
                        </div>
                        <div class="form-group col-md-6">
                            <label>Last Name</label>
                            <input type="text" class="form-control" name="LastName">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Phone Number</label>
                        <input type="tel" class="form-control" name="PhoneNumber">
                    </div>
                    <div class="form-group">
                        <label>Role</label>
                        <select class="form-control" name="Role" required>
                            <option value="Homeowner">Homeowner</option>
                            <option value="Staff">Staff</option>
                            <option value="Administrator">Administrator</option>
                        </select>
                    </div>
                    <div class="form-group address-group" style="display: none;">
                        <label>Address</label>
                        <textarea class="form-control" name="Address" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Add User
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit User</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" name="UserID">
                    <div class="form-group">
                        <label>Username</label>
                        <input type="text" class="form-control" name="Username" required>
                    </div>
                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" class="form-control" name="Email" required>
                    </div>
                    <div class="form-group">
                        <label>New Password (leave blank to keep current)</label>
                        <div class="password-input">
                            <input type="password" class="form-control" name="Password">
                            <button type="button" class="toggle-password">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label>First Name</label>
                            <input type="text" class="form-control" name="FirstName">
                        </div>
                        <div class="form-group col-md-6">
                            <label>Last Name</label>
                            <input type="text" class="form-control" name="LastName">
                        </div>
                    </div>
                    <div class="form-group">
                        <label>Phone Number</label>
                        <input type="tel" class="form-control" name="PhoneNumber">
                    </div>
                    <div class="form-group">
                        <label>Role</label>
                        <select class="form-control" name="Role" required>
                            <option value="Homeowner">Homeowner</option>
                            <option value="Staff">Staff</option>
                            <option value="Administrator">Administrator</option>
                        </select>
                    </div>
                    <div class="form-group address-group" style="display: none;">
                        <label>Address</label>
                        <textarea class="form-control" name="Address" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Dashboard Layout */
        .user-management {
            padding: 2rem;
            background: linear-gradient(rgba(26, 26, 26, 0.9), rgba(26, 26, 26, 0.9)), url('https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?w=1600&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
            min-height: 100vh;
        }

        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            background: rgba(34, 34, 34, 0.9);
            padding: 1.5rem;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .dashboard-header h1 {
            color: #fff;
            font-size: 2rem;
            margin: 0;
            background: linear-gradient(45deg, #00bcd4, #2196f3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        /* Search Box */
        .search-box {
            position: relative;
            width: 300px;
        }

        .search-box i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
        }

        .search-box input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: none;
            border-radius: 25px;
            background: #222;
            color: #fff;
            transition: all 0.3s ease;
        }

        .search-box input:focus {
            background: #2a2a2a;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.25);
            outline: none;
        }

        /* Users Section */
        .users-section {
            background: rgba(34, 34, 34, 0.9);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
        }

        .homeowners-section {
            background: linear-gradient(rgba(34, 34, 34, 0.9), rgba(34, 34, 34, 0.9)), url('https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=1600&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
        }

        .staff-section {
            background: linear-gradient(rgba(34, 34, 34, 0.9), rgba(34, 34, 34, 0.9)), url('https://images.unsplash.com/photo-1497366754035-f200968a6e72?w=1600&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .section-header h2 {
            color: #fff;
            font-size: 1.5rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-header h2 i {
            color: #00bcd4;
        }

        /* User Grid */
        .user-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .user-card {
            background: rgba(42, 42, 42, 0.9);
            border-radius: 12px;
            padding: 1.5rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }

        .user-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .user-avatar {
            width: 50px;
            height: 50px;
            background: #333;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: #00bcd4;
        }

        .user-info {
            flex: 1;
        }

        .user-info h3 {
            color: #fff;
            margin: 0 0 0.5rem 0;
            font-size: 1.2rem;
        }

        .role-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .role-badge.administrator {
            background: rgba(244, 67, 54, 0.2);
            color: #f44336;
        }

        .role-badge.staff {
            background: rgba(33, 150, 243, 0.2);
            color: #2196f3;
        }

        .role-badge.homeowner {
            background: rgba(76, 175, 80, 0.2);
            color: #4caf50;
        }

        .user-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-icon {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            border: none;
            background: #333;
            color: #fff;
            transition: all 0.3s ease;
        }

        .btn-icon:hover {
            transform: translateY(-2px);
        }

        .btn-icon.edit-user:hover {
            background: #00bcd4;
        }

        .btn-icon.delete-user:hover {
            background: #f44336;
        }

        .user-details {
            display: grid;
            gap: 1rem;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: #bbb;
        }

        .detail-item i {
            color: #00bcd4;
            width: 16px;
        }

        /* Modal Styles */
        .modal-content {
            background: #2a2a2a;
            color: #fff;
        }

        .modal-header {
            border-bottom: 1px solid #333;
        }

        .modal-header .close {
            color: #fff;
        }

        .form-control {
            background: #333;
            border: 1px solid #444;
            color: #fff;
            border-radius: 8px;
        }

        .form-control:focus {
            background: #333;
            border-color: #00bcd4;
            box-shadow: 0 0 0 2px rgba(0, 188, 212, 0.25);
            color: #fff;
        }

        .password-input {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: #666;
            cursor: pointer;
        }

        /* Button Styles */
        .btn-primary {
            background: #00bcd4;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            color: #fff;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: #008ba3;
            transform: translateY(-2px);
        }

        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 2rem;
            border-radius: 10px;
            color: white;
            font-weight: 500;
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 9999;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
        }

        .toast.error {
            background: linear-gradient(45deg, #f44336, #e91e63);
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Search functionality
            $('#searchInput').on('keyup', function() {
                const value = $(this).val().toLowerCase();
                $('.user-card').filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
                });
            });

            // Show/hide address field based on role
            function toggleAddressField(role) {
                $('.address-group').toggle(role === 'Homeowner');
            }

            // Initial toggle for add user form
            $('#addUserForm select[name="Role"]').change(function() {
                toggleAddressField($(this).val());
            });

            // Initial toggle for edit user form
            $('#editUserForm select[name="Role"]').change(function() {
                toggleAddressField($(this).val());
            });

            // Toggle password visibility
            $('.toggle-password').click(function() {
                const input = $(this).parent().find('input');
                const icon = $(this).find('i');
                
                if (input.attr('type') === 'password') {
                    input.attr('type', 'text');
                    icon.removeClass('fa-eye').addClass('fa-eye-slash');
                } else {
                    input.attr('type', 'password');
                    icon.removeClass('fa-eye-slash').addClass('fa-eye');
                }
            });

            // Create user card HTML
            function createUserCard(user) {
                return `
                    <div class="user-card" data-role="${user.role}" data-user-id="${user.userID}">
                        <div class="user-header">
                            <div class="user-avatar">
                                <i class="fas fa-${user.role === 'Homeowner' ? 'home' : 'user-tie'}"></i>
                            </div>
                            <div class="user-info">
                                <h3>${user.username}</h3>
                                <span class="role-badge ${user.role.toLowerCase()}">${user.role}</span>
                            </div>
                            <div class="user-actions">
                                <button class="btn btn-icon edit-user" data-user-id="${user.userID}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-icon delete-user" data-user-id="${user.userID}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="user-details">
                            <div class="detail-item">
                                <i class="fas fa-envelope"></i>
                                <span>${user.email}</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-phone"></i>
                                <span>${user.phoneNumber || 'Not provided'}</span>
                            </div>
                            <div class="detail-item">
                                <i class="fas fa-user-circle"></i>
                                <span>${user.firstName || ''} ${user.lastName || ''}</span>
                            </div>
                            ${user.role === 'Homeowner' ? `
                            <div class="detail-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <span>${user.address || 'No address provided'}</span>
                            </div>
                            ` : ''}
                            <div class="detail-item">
                                <i class="fas fa-calendar"></i>
                                <span>Joined ${new Date(user.createdAt).toLocaleDateString()}</span>
                            </div>
                        </div>
                    </div>
                `;
            }

            // Add user
            $('#addUserForm').submit(function(e) {
                e.preventDefault();
                $.ajax({
                    url: '@Url.Action("AddUser", "Account")',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.success) {
                            showToast(response.message, 'success');
                            const userCard = createUserCard(response.user);
                            $('.user-grid').prepend(userCard);
                            $('#addUserModal').modal('hide');
                            $('#addUserForm')[0].reset();
                        } else {
                            showToast(response.message, 'error');
                        }
                    },
                    error: function() {
                        showToast('An error occurred while adding the user', 'error');
                    }
                });
            });

            // Edit user
            $(document).on('click', '.edit-user', function() {
                const userId = $(this).data('user-id');
                $.get('@Url.Action("GetUser", "Account")/' + userId, function(data) {
                    const form = $('#editUserForm');
                    form.find('[name="UserID"]').val(data.userID);
                    form.find('[name="Username"]').val(data.username);
                    form.find('[name="Email"]').val(data.email);
                    form.find('[name="FirstName"]').val(data.firstName);
                    form.find('[name="LastName"]').val(data.lastName);
                    form.find('[name="PhoneNumber"]').val(data.phoneNumber);
                    form.find('[name="Role"]').val(data.role);
                    form.find('[name="Address"]').val(data.address);
                    form.find('[name="Password"]').val('');
                    
                    // Toggle address field based on role
                    toggleAddressField(data.role);
                    
                    $('#editUserModal').modal('show');
                });
            });

            // Submit edit form
            $('#editUserForm').submit(function(e) {
                e.preventDefault();
                $.ajax({
                    url: '@Url.Action("EditUser", "Account")',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.success) {
                            showToast(response.message, 'success');
                            const userCard = $(`.user-card[data-user-id="${response.user.userID}"]`);
                            const newUserCard = createUserCard(response.user);
                            userCard.replaceWith(newUserCard);
                            $('#editUserModal').modal('hide');
                        } else {
                            showToast(response.message, 'error');
                        }
                    },
                    error: function() {
                        showToast('An error occurred while updating the user', 'error');
                    }
                });
            });

            // Delete user
            $(document).on('click', '.delete-user', function() {
                const userId = $(this).data('user-id');
                const userCard = $(this).closest('.user-card');
                const userName = userCard.find('h3').text();

                if (confirm(`Are you sure you want to delete the user "${userName}"?`)) {
                    $.ajax({
                        url: '@Url.Action("DeleteUser", "Account")',
                        type: 'POST',
                        data: { id: userId },
                        success: function(response) {
                            if (response.success) {
                                showToast(response.message, 'success');
                                userCard.fadeOut(300, function() {
                                    $(this).remove();
                                });
                            } else {
                                showToast(response.message, 'error');
                            }
                        },
                        error: function() {
                            showToast('An error occurred while deleting the user', 'error');
                        }
                    });
                }
            });

            // Toast notification function
            function showToast(message, type) {
                const toast = $('<div>').addClass('toast ' + type).text(message);
                $('body').append(toast);
                setTimeout(() => toast.addClass('show'), 100);
                setTimeout(() => {
                    toast.removeClass('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }
        });
    </script>
}