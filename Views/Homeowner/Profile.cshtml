@model homeowner.Models.UserModel

@{
    ViewBag.Title = "User Profile";
    bool isLoggedIn = ViewBag.IsLoggedIn;
    string username = ViewBag.username;
}

<link rel="stylesheet" href="~/css/homeowner.css" asp-append-version="true" />

<div class="container mt-4">
    <div class="page-header">
        <div class="header-content">
            <h2><i class="fas fa-user-circle"></i> Profile Management</h2>
            <p>View and manage your personal information</p>
        </div>
    </div>

    <!-- Profile Section -->
    <section class="profile-container">
        <div class="profile-header">
            <div class="profile-info">
                <div class="profile-avatar">
                    <i class="fas fa-user"></i>
                </div>
                <div class="profile-details">
                    <h2>@username's Profile</h2>
                    <span class="role-badge">@Model.Role</span>
                </div>
            </div>
            <button class="btn btn-primary edit-profile-btn" data-toggle="modal" data-target="#editProfileModal">
                <i class="fas fa-edit"></i> Edit Profile
            </button>
        </div>
        <div class="profile-content">
            <div class="profile-stats">
                <div class="stat-card">
                    <i class="fas fa-calendar-check"></i>
                    <div class="stat-info">
                        <h4>Facility Bookings</h4>
                        <p>0 Active</p>
                    </div>
                </div>
                <div class="stat-card">
                    <i class="fas fa-tools"></i>
                    <div class="stat-info">
                        <h4>Service Requests</h4>
                        <p>0 Pending</p>
                    </div>
                </div>
                <div class="stat-card">
                    <i class="fas fa-comments"></i>
                    <div class="stat-info">
                        <h4>Forum Posts</h4>
                        <p>0 Posts</p>
                    </div>
                </div>
            </div>
            <div class="recent-activities">
                <h3><i class="fas fa-history"></i> Recent Activities</h3>
                <div class="activity-container">
                    <p>No recent activities available.</p>
                </div>
            </div>
            <div class="services-bookings">
                <h3><i class="fas fa-bookmark"></i> Recent Service Requests & Bookings</h3>
                <div class="activity-container">
                    <p>No recent requests or bookings available.</p>
                </div>
            </div>
        </div>
    </section>
</div>

<!-- Edit Profile Modal -->
<div class="modal fade" id="editProfileModal" tabindex="-1" role="dialog" aria-labelledby="editProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProfileModalLabel">
                    <i class="fas fa-user-edit"></i> Edit Profile
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="modalAlert" class="alert" style="display: none;"></div>
                <form id="editProfileForm" action="@Url.Action("EditProfile", "Homeowner")" method="POST">
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="username">
                                <i class="fas fa-user"></i> Username
                            </label>
                            <input type="text" class="form-control" id="username" name="username" placeholder="@Model.Username">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="email">
                                <i class="fas fa-envelope"></i> Email
                            </label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="@Model.Email">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-4">
                            <label for="firstName">
                                <i class="fas fa-user-tag"></i> First Name
                            </label>
                            <input type="text" class="form-control" id="firstName" name="firstName" placeholder="@Model.FirstName">
                        </div>
                        <div class="form-group col-md-4">
                            <label for="middleName">
                                <i class="fas fa-user-tag"></i> Middle Name
                            </label>
                            <input type="text" class="form-control" id="middleName" name="middleName" placeholder="@Model.MiddleName">
                        </div>
                        <div class="form-group col-md-4">
                            <label for="lastName">
                                <i class="fas fa-user-tag"></i> Last Name
                            </label>
                            <input type="text" class="form-control" id="lastName" name="lastName" placeholder="@Model.LastName">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="phoneNumber">
                            <i class="fas fa-phone"></i> Phone Number
                        </label>
                        <input type="text" class="form-control" id="phoneNumber" name="phoneNumber" placeholder="@Model.PhoneNumber">
                    </div>
                    <div class="password-section">
                        <h6 class="section-title">Change Password</h6>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="password">New Password</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="password" name="password" placeholder="Enter new password">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary toggle-password" type="button">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                <label for="confirmPassword">Confirm New Password</label>
                                <div class="input-group">
                                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary toggle-password" type="button">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">
                            <i class="fas fa-times"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Password toggle functionality
    document.querySelectorAll('.toggle-password').forEach(button => {
        button.addEventListener('click', function() {
            const input = this.parentElement.previousElementSibling;
            const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
            input.setAttribute('type', type);
            this.querySelector('i').classList.toggle('fa-eye');
            this.querySelector('i').classList.toggle('fa-eye-slash');
        });
    });

    // Form submission handling
    document.getElementById('editProfileForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Clear previous alerts
        const modalAlert = document.getElementById('modalAlert');
        modalAlert.style.display = 'none';
        
        // Check password match
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (password && password !== confirmPassword) {
            modalAlert.className = 'alert alert-danger';
            modalAlert.textContent = 'Passwords do not match!';
            modalAlert.style.display = 'block';
            return;
        }

        // Get form data
        const formData = new FormData(this);

        // Submit form via AJAX
        fetch(this.action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(response => {
            if (response.success) {
                // Show success message
                modalAlert.className = 'alert alert-success';
                modalAlert.textContent = response.message;
                modalAlert.style.display = 'block';

                // Update username in profile if changed
                if (response.newUsername) {
                    document.querySelector('.profile-details h2').textContent = response.newUsername + "'s Profile";
                }

                // Create success toast
                const toast = document.createElement('div');
                toast.className = 'alert alert-success custom-alert';
                toast.textContent = response.message;
                document.body.appendChild(toast);

                // Close modal and reload after delay
                setTimeout(() => {
                    $('#editProfileModal').modal('hide');
                    window.location.reload();
                }, 1500);
            } else {
                // Show error message
                modalAlert.className = 'alert alert-danger';
                modalAlert.textContent = response.message;
                modalAlert.style.display = 'block';
            }
        })
        .catch(error => {
            // Show error message
            modalAlert.className = 'alert alert-danger';
            modalAlert.textContent = 'An error occurred while updating your profile';
            modalAlert.style.display = 'block';
        });
    });

    // Show temporary messages if they exist
    @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
    {
        <text>
            const successMessage = '@TempData["SuccessMessage"]';
            if (successMessage) {
                const alert = document.createElement('div');
                alert.className = 'alert alert-success custom-alert';
                alert.textContent = successMessage;
                document.body.appendChild(alert);
                setTimeout(() => {
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 300);
                }, 3000);
            }
        </text>
    }

    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
    {
        <text>
            const errorMessage = '@TempData["ErrorMessage"]';
            if (errorMessage) {
                const alert = document.createElement('div');
                alert.className = 'alert alert-danger custom-alert';
                alert.textContent = errorMessage;
                document.body.appendChild(alert);
                setTimeout(() => {
                    alert.style.opacity = '0';
                    setTimeout(() => alert.remove(), 300);
                }, 3000);
            }
        </text>
    }
</script>
